version: 2.1

commands:
  destroy_environment:
    description: destroy stack when create one of its failed
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
           
  # revert_migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         working_directory: ./backend
  #         name: Revert migrations
  #         when: on_fail
  #         command: |
  #           pwd
  #           ls -la

  #           if grep -q "has been executed successfully." backend/migrations_dump.txt
  #           then
  #             echo "because 3rd-party service down so we use working space to save status as well file "
  #             cat migrations_dump.txt
  #           else
  #             echo Revert migrations
  #             cd ~/project/backend
  #             npm install
  #             ls -la
  #             npm run migrations:revert
  #           fi
      # - save_cache:
      #     key: backend-build
      #     paths: 
      #       - backend/node_modules
            
          
  aws_cli_intsall:
    steps:
      - run:
          name: Install aws-cli
          command: |
            sudo apt install curl
            sudo apt install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  aws_configure_credential:
    steps:
      - run:
          name: Create Credential Configuration AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set region $AWS_DEFAULT_REGION


jobs:
  ##################################################################################
  #                           ----Create-Docker-image-----                       #
  ##################################################################################
  test-code-build:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:

      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      # - run:
      #     name: install dependencies
      #     command: |
      #       pwd
      #       python3 -m venv project5
      #       . project5/bin/activate
      #       make install
      #       # Install hadolint
      #       wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
      #       chmod +x /bin/hadolint
      # - save_cache:
      #     paths:
      #       - ./venv
      #     key: v1-dependencies-{{ checksum "requirements.txt" }}
      # - run:
      #     name: run lint
      #     command: |
      #       . project5/bin/activate
      #       make lint 
      #       ls -la
      # - run:
      #     name: update
      #     command: |
      #       apt -y update
      #       apt -y install apt-transport-https ca-certificates curl software-properties-common
      #       systemctl status docker
      #       docker images
      # - run:
      #     name: Install docker
      #     command: |
      #       curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      #       add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
      #       apt-cache policy docker-ce
      #       apt -y update
      #       apt -y install docker-ce
  
  # build-docker-image:
  #   docker:
  #     - image: cimg/go:1.17
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - v1-dependencies-{{ checksum "requirements.txt" }}
  #           - v1-dependencies-
  #     - setup_remote_docker:
  #         version: 20.10.14
  #         docker_layer_caching: true
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           echo $AWS_ECR
  #           aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 657224673055.dkr.ecr.us-east-1.amazonaws.com
  #           docker build -t project5 .
  #           docker tag project5:latest $AWS_ECR/project5:latest
  #           docker images

  #           #login ECR

  #           #pull image

  #           docker push $AWS_ECR/project4:latest

  build-docker-image:
    docker:
      - image: cimg/base:stable-20.04 
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
          

    
workflows:
  default:
    jobs:
      - build-docker-image
