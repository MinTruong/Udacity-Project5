version: 2.1
jobs:
  ##################################################################################
  #                           ----Create-Docker-image-----                       #
  ##################################################################################
  test-code-build:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:

      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            pwd
            python3 -m venv project5
            . project5/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . project5/bin/activate
            make lint 
            ls -la
      # - run:
      #     name: update
      #     command: |
      #       apt -y update
      #       apt -y install apt-transport-https ca-certificates curl software-properties-common
      #       systemctl status docker
      #       docker images
      # - run:
      #     name: Install docker
      #     command: |
      #       curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      #       add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
      #       apt-cache policy docker-ce
      #       apt -y update
      #       apt -y install docker-ce
  

  build-docker-image:
    docker:
      - image: cimg/base:stable-20.04 
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: build-image
          command: |
            #login ECR
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR
            docker build -t project5 .
            docker tag project5:latest $AWS_ECR/project5:latest
            docker images

      - run:
          name: push-image
          command: |
            #pull image
            docker push $AWS_ECR/project5:latest

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable-20.04
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: deploy-roles
          command: |
            cd .circleci/ansible/CF/
            echo "----------------------------------------------------deploy Network"
            aws cloudformation deploy --stack-name project5Roles --template-file roles.yaml --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" --region=$AWS_DEFAULT_REGION
      
      - run:
          name: deploy-network
          command: |
            cd .circleci/ansible/CF/
            echo "----------------------------------------------------deploy Network"
            aws cloudformation deploy --stack-name project5Network --template-file network.yaml --parameter-overrides file://parameter.json --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" --region=$AWS_DEFAULT_REGION

      - run:
          name: deploy-EKS-Node
          command: |
            cd .circleci/ansible/CF/
            a=0
            while [ $a -lt 100 ]
            do
              if [ $(aws cloudformation describe-stacks --stack-name project5Network --query Stacks[*].StackStatus --output text) == "CREATE_COMPLETE" ]
              then
                a=101
                echo "had stack project5Network"
                echo "---------------------------------deploy EKS and Node"
                aws cloudformation deploy --stack-name infrastructure --template-file infrastructure.yaml --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" --region=$AWS_DEFAULT_REGION
              else
                a=`expr $a + 1`
                sleep 6
              fi
            done

  deploy:
    docker:
      - image: cimg/base:stable-20.04
    
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            echo "----------------------------------------------------------------install aws CLI"
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            echo "----------------------------------------------------------------install kubectl"
            curl -o kubectl https://s3.cn-north-1.amazonaws.com.cn/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            curl -o kubectl.sha256 https://s3.cn-north-1.amazonaws.com.cn/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl.sha256
            openssl sha1 -sha256 kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc 
            kubectl version --short --client

            echo "----------------------------------------------------------------install eksctl"
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version    
      
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          name: deploy-app
          command: |
            echo "----------------------------------------------------------------list out file in repo"
            ls -la

            echo "----------------------------------------------------------------connect to ECR and push image"
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 657224673055.dkr.ecr.us-east-1.amazonaws.com
            docker pull $AWS_ECR/project5:latest
            docker images
            
            echo "----------------------------------------------------------------remote cluster EKS"
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $AWS_EKS_CLUSTER

            echo "----------------------------------------------------------------deploy app"
            kubectl apply -f deployment_project5.yaml 

            echo "-----------------------------get node---------------------------------------"
            kubectl get nodes 

            echo "--------------------------get deployment------------------------------------"
            kubectl get deployment

            echo "-----------------------------get pods---------------------------------------"
            kubectl get pods 

            echo "-----------------------------get svc---------------------------------------"
            kubectl get svc
  
workflows:
  default:
    jobs:
      # - test-code-build
      # - deploy-infrastructure
      # - build-docker-image:
      #     requires:
      #       - test-code-build
      - deploy:
          requires:
            - build-docker-image
            - deploy-infrastructure
      
          